// <auto-generated />
using System;
using DataEFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataEFCore.Migrations
{
    [DbContext(typeof(DetectionSystemDbContext))]
    [Migration("20200528013126_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("Data.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceEui")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Data.DeviceConfiguration", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HeartbeatPeriodDays")
                        .HasColumnType("INTEGER");

                    b.Property<short>("ScanMinuteOfTheDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.ToTable("DeviceConfiguration");
                });

            modelBuilder.Entity("Data.DeviceStatus", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DeviceWorking")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SentToKommune")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeviceId");

                    b.ToTable("DeviceStatus");
                });

            modelBuilder.Entity("Data.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceEui")
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Data.ObjectDetectionNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjectDetection")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SentToKommune")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WidthCentimeters")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotificationId");

                    b.ToTable("ObjectDetectionNotification");
                });

            modelBuilder.Entity("Data.DeviceConfiguration", b =>
                {
                    b.HasOne("Data.Device", "Device")
                        .WithOne("Configuration")
                        .HasForeignKey("Data.DeviceConfiguration", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.DeviceStatus", b =>
                {
                    b.HasOne("Data.Device", "Device")
                        .WithOne("Status")
                        .HasForeignKey("Data.DeviceStatus", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.ObjectDetectionNotification", b =>
                {
                    b.HasOne("Data.Notification", "Notification")
                        .WithOne("ObjectDetectionNotification")
                        .HasForeignKey("Data.ObjectDetectionNotification", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
